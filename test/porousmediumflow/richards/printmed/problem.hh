// -*- mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
// vi: set et ts=4 sw=4 sts=4:
//
// SPDX-FileCopyrightInfo: Copyright Â© DuMux Project contributors, see AUTHORS.md in root folder
// SPDX-License-Identifier: GPL-3.0-or-later
//
/*!
 * \file
 * \ingroup RichardsTests
 * \brief A water infiltration problem with a low-permeability lens
 *        embedded into a high-permeability domain which uses the
 *        Richards box model.
 */

#ifndef DUMUX_RICHARDS_LENSPROBLEM_HH
#define DUMUX_RICHARDS_LENSPROBLEM_HH

#include <dumux/common/properties.hh>
#include <dumux/common/parameters.hh>
#include <dumux/common/boundarytypes.hh>
#include <dumux/common/numeqvector.hh>

#include "dumux/porousmediumflow/droplet/dropsolver.hh"
#include <dumux/porousmediumflow/problem.hh>

namespace Dumux {

/*!
 * \ingroup RichardsTests
 *
 * \brief A water infiltration problem with a low-permeability lens
 *        embedded into a high-permeability domain which uses the
 *        Richards model.
 *
 * The domain is box shaped. Left and right boundaries are Dirichlet
 * boundaries with fixed water pressure (fixed Saturation \f$S_w = 0\f$),
 * bottom boundary is closed (Neumann 0 boundary), the top boundary
 * (Neumann 0 boundary) is also closed except for infiltration
 * section, where water is infiltrating into an initially unsaturated
 * porous medium. This problem is very similar to the LensProblem
 * which uses the TwoPBoxModel, with the main difference being that
 * the domain is initially fully saturated by gas instead of water and
 * water instead of a %DNAPL infiltrates from the top.
 *
 * This problem uses the \ref RichardsModel
 */
template <class TypeTag>
class RichardsLensProblem : public PorousMediumFlowProblem<TypeTag>
{
    using ParentType = PorousMediumFlowProblem<TypeTag>;
    using GridView = typename GetPropType<TypeTag, Properties::GridGeometry>::GridView;
    using PrimaryVariables = GetPropType<TypeTag, Properties::PrimaryVariables>;
    using BoundaryTypes = Dumux::BoundaryTypes<GetPropType<TypeTag, Properties::ModelTraits>::numEq()>;
    using NumEqVector = Dumux::NumEqVector<PrimaryVariables>;
    using Scalar = GetPropType<TypeTag, Properties::Scalar>;
    using Indices = typename GetPropType<TypeTag, Properties::ModelTraits>::Indices;
    using GridGeometry = GetPropType<TypeTag, Properties::GridGeometry>;
    using DropSolver = DropletSolverTwoP<TypeTag, false>;
    enum {
        // copy some indices for convenience
        pressureIdx = Indices::pressureIdx,
        conti0EqIdx = Indices::conti0EqIdx,

        // world dimension
        dimWorld = GridView::dimensionworld
    };
    using Element = typename GridView::template Codim<0>::Entity;

    using GlobalPosition = typename Element::Geometry::GlobalCoordinate;

public:
    RichardsLensProblem(std::shared_ptr<const GridGeometry> gridGeometry)
    : ParentType(gridGeometry)
    {
        name_ = getParam<std::string>("Problem.Name");
    }

    /*!
     * \name Problem parameters
     */
    // \{

    /*!
     * \brief The problem name
     *
     * This is used as a prefix for files generated by the simulation.
     */
    const std::string& name() const
    { return name_; }

    /*!
     * \brief Returns the reference pressure [Pa] of the nonwetting
     *        fluid phase within a finite volume
     *
     * This problem assumes a constant reference pressure of 1 bar.
     */
    Scalar nonwettingReferencePressure() const
    { return 1.0e5; };

    // \}

    /*!
     * \name Boundary conditions
     */
    // \{

    /*!
     * \brief Specifies which kind of boundary condition should be
     *        used for which equation on a given boundary segment.
     *
     * \param globalPos The position for which the boundary type is set
     */
    BoundaryTypes boundaryTypesAtPos(const GlobalPosition &globalPos) const
    {
        BoundaryTypes bcTypes;

        bcTypes.setAllNeumann();

        // if (onUpperBoundary(globalPos))
        // {
        //     if (dropletSolver_->isCoupledWithDroplet(globalPos))
        //     {
        //         bcTypes.setDirichlet(pressureIdx);
        //     }
        //     // else
        //     //     bcTypes.setAllNeumann();
        // }
        // else
        //     bcTypes.setAllNeumann();

        return bcTypes;
    }

    /*!
     * \brief Evaluates the boundary conditions for a Dirichlet boundary segment.
     *
     * \param globalPos The position for which the Dirichlet value is set
     *
     * For this method, the \a values parameter stores primary variables.
     */
    PrimaryVariables dirichletAtPos(const GlobalPosition &globalPos) const
    {
        // PrimaryVariables values;
        // const Scalar sw = 0.0;
        // const Scalar pc = this->spatialParams().fluidMatrixInteractionAtPos(globalPos).pc(sw);
        // values[pressureIdx] = nonwettingReferencePressure() - pc;

        // if (onUpperBoundary(globalPos))
        // {
        //     if (dropletSolver_->isCoupledWithDroplet(globalPos))
        //     {
        //         const Scalar sw = 1.0;
        //         const Scalar pc = this->spatialParams().fluidMatrixInteractionAtPos(globalPos).pc(sw);
        //         const auto& droplet = dropletSolver_->droplet();
        //         values[pressureIdx] = nonwettingReferencePressure() - pc + dropletSolver_->Pc(droplet);
        //     }

        // }
        return initialAtPos(globalPos);
    }

    /*!
     * \brief Evaluates the boundary conditions for a Neumann boundary segment.
     *
     * For this method, the \a values parameter stores the mass flux
     * in normal direction of each phase. Negative values mean influx.
     *
     * \param globalPos The position for which the Neumann value is set
     */
    NumEqVector neumannAtPos(const GlobalPosition &globalPos) const
    {
        NumEqVector values(0.0);
        // if (onInlet(globalPos))
        //     values[conti0EqIdx] = -0.004; // kg/(m*s)

        if (onUpperBoundary(globalPos))
        {
            if (dropletSolver_->isCoupledWithDroplet(globalPos))
            {
                values[Indices::conti0EqIdx] = -0.0004; // kg/(m*s)
            }
        }
        return values;
    }

    /*!
     * \name Volume terms
     */
    // \{

    /*!
     * \brief Evaluates the initial values for a control volume.
     *
     * For this method, the \a values parameter stores primary
     * variables.
     *
     * \param globalPos The position for which the boundary type is set
     */
    PrimaryVariables initialAtPos(const GlobalPosition &globalPos) const
    { return initial_(globalPos); };

    // \}

    void setDropSolver(std::shared_ptr<DropSolver> dropletSolver)
    { dropletSolver_ = dropletSolver; }

    bool onInlet(const GlobalPosition &globalPos) const
    {
        Scalar width = this->gridGeometry().bBoxMax()[0] - this->gridGeometry().bBoxMin()[0];
        Scalar lambda = (this->gridGeometry().bBoxMax()[0] - globalPos[0])/width;
        return onUpperBoundary(globalPos) && 0.5 < lambda && lambda < 2.0/3.0;
    }


   bool onLeftBoundary(const GlobalPosition &globalPos) const
    {
        return globalPos[0] < this->gridGeometry().bBoxMin()[0] + eps_;
    }

    bool onRightBoundary(const GlobalPosition &globalPos) const
    {
        return globalPos[0] > this->gridGeometry().bBoxMax()[0] - eps_;
    }

    bool onLowerBoundary(const GlobalPosition &globalPos) const
    {
        return globalPos[1] < this->gridGeometry().bBoxMin()[1] + eps_;
    }

    bool onUpperBoundary(const GlobalPosition &globalPos) const
    {
        return globalPos[1] > this->gridGeometry().bBoxMax()[1] - eps_;
    }

private:
    PrimaryVariables initial_(const GlobalPosition &globalPos) const
    {
        PrimaryVariables values(0.0);
        const Scalar sw = 0.0;
        const Scalar pc = this->spatialParams().fluidMatrixInteractionAtPos(globalPos).pc(sw);
        values[pressureIdx] = nonwettingReferencePressure() - pc;

        // if (onUpperBoundary(globalPos))
        // {
        //     if (dropletSolver_->isCoupledWithDroplet(globalPos))
        //     {
        //         // const Scalar sw = 0.5;
        //         const Scalar pc = this->spatialParams().fluidMatrixInteractionAtPos(globalPos).pc(1.0);
        //         const auto& droplet = dropletSolver_->droplet();
        //         values[pressureIdx] = nonwettingReferencePressure() - pc + dropletSolver_->Pc(droplet);
        //     }

        // }

        return values;
    }

    static constexpr Scalar eps_ = 1.5e-7;

    GlobalPosition lensLowerLeft_;
    GlobalPosition lensUpperRight_;
    std::string name_;

    std::shared_ptr<DropSolver> dropletSolver_;
};

} // end namespace Dumux

#endif
