// -*- mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
// vi: set et ts=4 sw=4 sts=4:
//
// SPDX-FileCopyrightInfo: Copyright Â© DuMux Project contributors, see AUTHORS.md in root folder
// SPDX-License-Identifier: GPL-3.0-or-later
//
/*!
 * \file
 * \ingroup ShallowWaterTests
 * \brief A test for the Shallow water model in a rough channel with limited
 * Nikuradse friction.
 */
#ifndef DUMUX_ROUGH_CHANNEL_TEST_PROBLEM_HH
#define DUMUX_ROUGH_CHANNEL_TEST_PROBLEM_HH

#include <dumux/common/boundarytypes.hh>
#include <dumux/common/parameters.hh>
#include <dumux/common/properties.hh>
#include <dumux/common/numeqvector.hh>

#include <dumux/freeflow/shallowwater/problem.hh>
#include <dumux/freeflow/shallowwater/boundaryfluxes.hh>

namespace Dumux {

/*!
 * \ingroup ShallowWaterTests
 * \brief A simple flow in a rough channel with friction law after Nikuradse with
 * limiting.
 *
 * This is a synthetic test to check if the limiting of friction laws works.
 * Therefore a parameter RoughnessHeight is used to ensure that the maximum
 * calculated shear stress of the friction law is limited. An artificial water
 * depth is added to the actual water depth if the water depth is smaller than
 * two times the RoughnessHeight to limit the shear stress.
 *
 * At the left border a discharge boundary condition is applied and at the right
 * border a water depth boundary condition. All other boundaries are set to
 * no-flow.
 *
 * This problem uses the \ref ShallowWaterModel
 */
template <class TypeTag>
class RoughChannelProblem : public ShallowWaterProblem<TypeTag>
{
    using ParentType = ShallowWaterProblem<TypeTag>;

    using Scalar = GetPropType<TypeTag, Properties::Scalar>;
    using PrimaryVariables = GetPropType<TypeTag, Properties::PrimaryVariables>;
    using NumEqVector = Dumux::NumEqVector<PrimaryVariables>;
    using BoundaryTypes = Dumux::BoundaryTypes<GetPropType<TypeTag, Properties::ModelTraits>::numEq()>;
    using NeumannFluxes = NumEqVector;
    using Indices = typename GetPropType<TypeTag, Properties::ModelTraits>::Indices;

    using GridGeometry = GetPropType<TypeTag, Properties::GridGeometry>;
    using GridView = typename GridGeometry::GridView;
    using Element = typename GridView::template Codim<0>::Entity;
    using GlobalPosition = typename Element::Geometry::GlobalCoordinate;
    using FVElementGeometry = typename GridGeometry::LocalView;
    using SubControlVolume = typename FVElementGeometry::SubControlVolume;
    using SubControlVolumeFace = typename FVElementGeometry::SubControlVolumeFace;

    using GridVariables = GetPropType<TypeTag, Properties::GridVariables>;
    using ElementFluxVariablesCache = typename GridVariables::GridFluxVariablesCache::LocalView;
    using ElementVolumeVariables = typename GridVariables::GridVolumeVariables::LocalView;

public:
    RoughChannelProblem(std::shared_ptr<const GridGeometry> gridGeometry)
    : ParentType(gridGeometry)
    {
        name_ = getParam<std::string>("Problem.Name");
        bedSlope_ = getParam<Scalar>("Problem.BedSlope");
        discharge_ = getParam<Scalar>("Problem.Discharge");
        hBoundary_ = getParam<Scalar>("Problem.WaterDepthOutflow");
    }

    /*!
     * \brief The problem name
     *
     * This is used as a prefix for files generated by the simulation.
     */
    const std::string& name() const
    {
        return name_;
    }

     /*!
     * \brief Evaluate the source term for all balance equations within a given
     *        sub-control-volume.
     *
     * This is the method for the case where the source term is
     * potentially solution dependent and requires some quantities that
     * are specific to the fully-implicit method.
     *
     * \param element The finite element
     * \param fvGeometry The finite-volume geometry
     * \param elemVolVars All volume variables for the element
     * \param scv The sub control volume
     *
     * For this method, the values parameter stores the conserved quantity rate
     * generated or annihilate per volume unit. Positive values mean
     * that the conserved quantity is created, negative ones mean that it vanishes.
     * E.g. for the mass balance that would be a mass rate in \f$ [ kg / (m^3 \cdot s)] \f$.
     */
     NumEqVector source(const Element& element,
                        const FVElementGeometry& fvGeometry,
                        const ElementVolumeVariables& elemVolVars,
                        const SubControlVolume &scv) const
    {

        NumEqVector source (0.0);
        source += bottomFrictionSource(element, fvGeometry, elemVolVars, scv);
        return source;
    }

    /*!
     * \brief Compute the source term due to bottom friction
     */
    NumEqVector bottomFrictionSource(const Element& element,
                                     const FVElementGeometry& fvGeometry,
                                     const ElementVolumeVariables& elemVolVars,
                                     const SubControlVolume &scv) const
    {
        NumEqVector bottomFrictionSource(0.0);

        const auto& volVars = elemVolVars[scv];
        Dune::FieldVector<Scalar, 2> bottomShearStress =
            this->spatialParams().frictionLaw(element, scv).bottomShearStress(volVars);

        bottomFrictionSource[0] = 0.0;
        bottomFrictionSource[1] = -bottomShearStress[0] / volVars.density();
        bottomFrictionSource[2] = -bottomShearStress[1] / volVars.density();

        return bottomFrictionSource;
    }

    /*!
     * \brief Specifies which kind of boundary condition should be
     *        used for which equation on a given boundary segment.
     *
     * \param globalPos The position for which the boundary type is set
     */
    BoundaryTypes boundaryTypesAtPos(const GlobalPosition &globalPos) const
    {
        BoundaryTypes bcTypes;
        bcTypes.setAllNeumann();
        return bcTypes;
    }

    /*!
     * \brief Specifies the Neumann boundary
     *
     *  We need the Riemann invariants to compute the values depending of the boundary type.
     *  Since we use a weak imposition we do not have a Dirichlet value. We impose fluxes
     *  based on q, h, etc. computed with the Riemann invariants
     */
    NeumannFluxes neumann(const Element& element,
                          const FVElementGeometry& fvGeometry,
                          const ElementVolumeVariables& elemVolVars,
                          const ElementFluxVariablesCache& elemFluxVarsCache,
                          const SubControlVolumeFace& scvf) const
    {
        NeumannFluxes values(0.0);

        const auto& insideScv = fvGeometry.scv(scvf.insideScvIdx());
        const auto& insideVolVars = elemVolVars[insideScv];
        const auto& nxy = scvf.unitOuterNormal();
        const auto gravity = this->spatialParams().gravity(scvf.center());
        const auto boundaryStateVariables = [&]() -> std::array<Scalar, 3>
        {
            // impose discharge at the left side
            if (scvf.center()[0] < this->gridGeometry().bBoxMin()[0] + eps_)
            {
                return ShallowWater::fixedDischargeBoundary(discharge_,
                    insideVolVars.waterDepth(), insideVolVars.velocity(0), insideVolVars.velocity(1),
                    gravity, nxy
                );
            }

            // impose water depth at the right side
            else if (scvf.center()[0] > this->gridGeometry().bBoxMax()[0] - eps_)
            {
                return ShallowWater::fixedWaterDepthBoundary(hBoundary_,
                    insideVolVars.waterDepth(), insideVolVars.velocity(0), insideVolVars.velocity(1),
                    gravity, nxy
                );
            }

            // no flow boundary
            else
            {
                return {{
                    insideVolVars.waterDepth(),
                    -insideVolVars.velocity(0),
                    -insideVolVars.velocity(1)
                }};
            }
        }();

        const auto riemannFlux = ShallowWater::riemannProblem(
            insideVolVars.waterDepth(), boundaryStateVariables[0],
            insideVolVars.velocity(0), boundaryStateVariables[1],
            insideVolVars.velocity(1), boundaryStateVariables[2],
            insideVolVars.bedSurface(), insideVolVars.bedSurface(),
            gravity, nxy
        );

        values[Indices::massBalanceIdx] = riemannFlux[0];
        values[Indices::velocityXIdx] = riemannFlux[1];
        values[Indices::velocityYIdx] = riemannFlux[2];

        return values;
    }

    /*!
     * \brief Evaluate the initial values for a control volume
     */
    PrimaryVariables initialAtPos(const GlobalPosition &globalPos) const
    {
        PrimaryVariables values(0.0);

        values[0] = hBoundary_;
        values[1] = abs(discharge_)/hBoundary_ *0.9;
        values[2] = 0.0;

        return values;
    };

private:
    Scalar hBoundary_;
    Scalar bedSlope_;
    Scalar discharge_; // discharge at the inflow boundary
    static constexpr Scalar eps_ = 1.0e-6;
    std::string name_;
};

} // end namespace Dumux

#endif
