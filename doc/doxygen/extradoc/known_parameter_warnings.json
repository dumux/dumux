{
    "dumux/io/grid/cakegridmanager.hh": [
        "positions[i] = getParamFromGroup<std::vector<Scalar>>(modelParamGroup, \"Grid.Radial\" + std::to_string(i));",
        "positions[i] = getParamFromGroup<std::vector<Scalar>>(modelParamGroup, \"Grid.Angular\" + std::to_string(i));",
        "positions[i] = getParamFromGroup<std::vector<Scalar>>(modelParamGroup, \"Grid.Axial\" + std::to_string(i));",
        "cells[i] = getParamFromGroup<std::vector<int>>(modelParamGroup, \"Grid.Cells\" +  std::to_string(i), cells[i]);",
        "grading[i] = getParamFromGroup<std::vector<Scalar>>(modelParamGroup, \"Grid.Grading\" +  std::to_string(i), grading[i]);"
    ],
    "dumux/io/grid/gridmanager_yasp.hh": [
        "positions[i] = getParamFromGroup<std::vector<ctype>>(modelParamGroup, \"Grid.Positions\" + std::to_string(i));",
        "cells[i] = getParamFromGroup<std::vector<int>>(modelParamGroup, \"Grid.Cells\" + std::to_string(i), cells[i]);",
        "grading[i] = getParamFromGroup<std::vector<ctype>>(modelParamGroup, \"Grid.Grading\" + std::to_string(i), grading[i]);"
    ],
    "dumux/io/grid/porenetwork/structuredlatticegridcreator.hh": [
        "positions[i] = getParamFromGroup<std::vector<CoordScalar>>(paramGroup_, \"Grid.Positions\" + std::to_string(i), std::vector<CoordScalar>{});",
        "grading[i] = getParamFromGroup<std::vector<CoordScalar>>(paramGroup_, \"Grid.Grading\" + std::to_string(i), grading[i]);"
    ],
    "dumux/io/loadsolution.hh": [
        "const auto pvName = getParamFromGroup<std::vector<std::string>>(paramGroup, paramNameWithState);"
    ],
    "dumux/linear/linearsolverparameters.hh": [
        "const auto value = getParam<std::string>(fullDumuxKey, \"\");"
    ],
    "dumux/io/grid/porenetwork/parametersforgeneratedgrid.hh": [
        "auto lowerLeft = getParamFromGroup<GlobalPosition>(paramGroup_, \"Grid.Subregion\" + std::to_string(i) + \".LowerLeft\");",
        "auto upperRight = getParamFromGroup<GlobalPosition>(paramGroup_, \"Grid.Subregion\" + std::to_string(i) + \".UpperRight\");",
        "const auto poreLabelsToSetFixedRadius = getParamFromGroup<std::vector<int>>(paramGroup_, prefix + \"PoreLabelsToSetFixedRadius\", std::vector<int>{});",
        "const auto poreLabelsToApplyFactorForRadius = getParamFromGroup<std::vector<int>>(paramGroup_, prefix + \"PoreLabelsToApplyFactorForRadius\", std::vector<int>{});",
        "const auto poreRadiusForLabel = getParamFromGroup<std::vector<Scalar>>(paramGroup_, prefix + \"FixedPoreRadiusForLabel\", std::vector<Scalar>{});",
        "const auto poreRadiusFactorForLabel = getParamFromGroup<std::vector<Scalar>>(paramGroup_, prefix + \"PoreRadiusFactorForLabel\", std::vector<Scalar>{});",
        "const Scalar fixedPoreRadius = getParamFromGroup<Scalar>(paramGroup_, prefix + \"PoreInscribedRadius\", -1.0);",
        "const auto seed = getParamFromGroup<unsigned int>(paramGroup_, prefix + \"ParameterRandomNumberSeed\", std::random_device{}());",
        "const auto type = getParamFromGroup<std::string>(paramGroup_, prefix + \"ParameterType\", \"lognormal\");",
        "return std::array{getParamFromGroup<Scalar>(paramGroup_, prefix + paramName0),",
        "getParamFromGroup<Scalar>(paramGroup_, prefix + paramName1)};",
        "const Scalar inputThroatInscribedRadius = getParamFromGroup<Scalar>(paramGroup_, prefix + \"ThroatInscribedRadius\", -1.0);",
        "const Scalar throatN = getParamFromGroup<Scalar>(paramGroup_, prefix + \"ThroatInscribedRadiusN\", 0.1);",
        "const Scalar inputThroatLength = getParamFromGroup<Scalar>(paramGroup_, prefix + \"ThroatLength\", -1.0);",
        "const bool subtractRadiiFromThroatLength = getParamFromGroup<bool>(paramGroup_, prefix + \"SubtractPoreInscribedRadiiFromThroatLength\", true);"
    ],
    "dumux/freeflow/navierstokes/staggered/velocitygradients.hh": [
        "static const bool unsymmetrizedGradientForBJ = getParamFromGroup<bool>(problem.paramGroup(),",
        "static const bool unsymmetrizedGradientForBJ = getParamFromGroup<bool>(problem.paramGroup(),"
    ],
    "dumux/porousmediumflow/fvspatialparams1pconstant.hh": [
        ", temperature_(getParam<Scalar>("
    ],
    "dumux/porousmediumflow/fluxvariablescachefiller.hh": [
        "static const auto zeroD = getParamFromGroup<Scalar>("
    ],
    "dumux/multidomain/boundary/freeflowporenetwork/snappygridmanager.hh": [
        "static const auto couplingPlaneNormal = getParamFromGroup<GlobalPosition>(modelParamGroup,",
        "const ScalarVector upstreamPositions = getParamFromGroup<ScalarVector>(modelParamGroup, \"Grid.UpstreamPositions\" + std::to_string(i), ScalarVector{});",
        "const ScalarVector downstreamPositions = getParamFromGroup<ScalarVector>(modelParamGroup, \"Grid.DownstreamPositions\" + std::to_string(i), ScalarVector{});",
        "const ScalarVector normalPositions = getParamFromGroup<ScalarVector>(modelParamGroup, \"Grid.Positions\" + std::to_string(i), ScalarVector{});",
        "const IntVector cellsUpstream = getParamFromGroup<IntVector>(modelParamGroup_,",
        "const ScalarVector upstreamGrading = getParamFromGroup<ScalarVector>(modelParamGroup_, \"Grid.UpstreamGrading\"  + std::to_string(directionIndex), ScalarVector{});",
        "const IntVector downstreamcells = getParamFromGroup<IntVector>(modelParamGroup_,",
        "const ScalarVector downstreamGrading = getParamFromGroup<ScalarVector>(modelParamGroup_, \"Grid.DownstreamGrading\"  + std::to_string(directionIndex), ScalarVector{});",
        "const IntVector cellsNormal = getParamFromGroup<IntVector>(modelParamGroup_, \"Grid.Cells\"  + std::to_string(directionIndex));",
        "const ScalarVector normalGrading = getParamFromGroup<ScalarVector>(modelParamGroup_, \"Grid.Grading\"  + std::to_string(directionIndex), ScalarVector{});"
    ],
    "dumux/assembly/boxlocalassembler.hh": [
        "static const bool updateAllVolVars = getParamFromGroup<bool>("
    ],
    "dumux/assembly/fcdiamondlocalassembler.hh": [
        "static const bool updateAllVolVars = getParamFromGroup<bool>("
    ],
    "dumux/assembly/pq1bubblelocalassembler.hh": [
        "static const bool updateAllVolVars = getParamFromGroup<bool>("
    ],
    "dumux/flux/shallowwaterviscousflux.hh": [
        "static const auto useMixingLengthTurbulenceModel = getParamFromGroup<bool>(",
        "static const auto backgroundKinematicViscosity = getParamFromGroup<Scalar>("
    ],
    "dumux/linear/stokes_solver.hh": [
        "const auto mode = getParamFromGroup<std::string>("
    ],
    "dumux/assembly/cvfelocalassembler.hh": [
        "static const bool updateAllVolVars = getParamFromGroup<bool>("
    ]
}
